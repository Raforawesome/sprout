name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v0.1.0)"
        required: true
        default: ""
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  RELEASE_NAME: sprout

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Release
        run: |
          cargo bundle --release

      - name: Package Artifact
        run: |
          cd target/release/bundle/deb
          tar -czf ${{ env.RELEASE_NAME }}-linux-x86_64.tar.gz *.deb

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-linux-x86_64
          path: target/release/bundle/deb/${{ env.RELEASE_NAME }}-linux-x86_64.tar.gz

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-14]
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: intel
          - os: macos-14
            target: aarch64-apple-darwin
            arch: silicon

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Release
        run: |
          cargo bundle --release --target ${{ matrix.target }}

      - name: Package Artifact
        run: |
          cd target/${{ matrix.target }}/release/bundle/osx
          zip -r ${{ env.RELEASE_NAME }}-macos-${{ matrix.arch }}.zip *.app

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}-macos-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/bundle/osx/${{ env.RELEASE_NAME }}-macos-${{ matrix.arch }}.zip

  # build-windows:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: x86_64-pc-windows-msvc

  #     - name: Install cargo-bundle
  #       run: cargo install cargo-bundle

  #     - name: Cache Dependencies
  #       uses: Swatinem/rust-cache@v2

  #     - name: Build Release
  #       run: |
  #         cargo bundle --release

  #     - name: Package Artifact
  #       run: |
  #         cd target/release
  #         Compress-Archive -Path *.exe -DestinationPath ${{ env.RELEASE_NAME }}-windows-x86_64.zip

  #     - name: Upload Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.RELEASE_NAME }}-windows-x86_64
  #         path: target/release/${{ env.RELEASE_NAME }}-windows-x86_64.zip

  create-release:
    # needs: [build-linux, build-macos, build-windows]
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Sprout ${{ env.VERSION }}
          draft: true
          files: |
            artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
